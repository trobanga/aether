name: CI

on:
  push:
    tags: [ "v*.*.*" ]
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  merge_group:
  branch_protection_rule:
  schedule:
    - cron: '15 7 * * 2'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.run_id }}
          path: |
            golangci-lint-report.xml
          retention-days: 30
          if-no-files-found: ignore

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Run unit tests
        run: make test-unit

      - name: Generate coverage report
        run: make coverage

      - name: Upload coverage to Coveralls
        run: |
          go install github.com/mattn/goveralls@latest
          goveralls -coverprofile=coverage.out -service=github
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ github.run_id }}
          path: |
            coverage.out
            coverage.html
          retention-days: 90
          if-no-files-found: ignore

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-test]
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0

      - name: Start Docker services
        working-directory: .github/test
        run: docker compose up -d

      - name: Wait for services to be healthy
        run: |
          timeout 60 bash -c 'until docker compose -f .github/test/compose.yaml ps | grep -q "healthy"; do
            echo "Waiting for services to be healthy..."
            sleep 2
          done' || {
            echo "Services failed to become healthy within 60 seconds"
            docker compose -f .github/test/compose.yaml ps
            docker compose -f .github/test/compose.yaml logs
            exit 2
          }

      - name: Run integration tests
        run: make test-integration

      - name: Capture service logs on failure
        if: failure()
        run: |
          docker compose -f .github/test/compose.yaml logs > docker-logs-integration.txt

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_id }}
          path: |
            test-results-integration.json
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload service logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs-integration-${{ github.run_id }}
          path: docker-logs-integration.txt
          retention-days: 7

      - name: Cleanup Docker services
        if: always()
        run: docker compose -f .github/test/compose.yaml down -v

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    steps:
      - name: Placeholder
        run: echo "E2E test job - steps will be added in Phase 6 (User Story 4)"
